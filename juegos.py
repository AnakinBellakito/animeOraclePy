import csv
import cx_Oracle
from pygame import Cursor
#Falta el trigger




connection = cx_Oracle.connect("PALTA","AVOCADO","localhost:1523")            #<------------ CAMBIAR VALORES {USER;PASS;PORT}
cur = connection.cursor()


cur.execute(
    """
        CREATE TABLE TIENDA(
            rank NUMBER NOT NULL,
            name VARCHAR2(200) NOT NULL,
            platform VARCHAR2(50) NOT NULL,
            year VARCHAR2(50),
            genre VARCHAR2(50) NOT NULL,
            publisher VARCHAR(50) NOT NULL,
            na_sales FLOAT(7),
            eu_sales FLOAT(7),
            jp_sales FLOAT(7),
            other_sales FLOAT(7),
            global_sales FLOAT(7),
            PRIMARY KEY(rank)
    
        )

""")



cur.execute(
    """
        CREATE TABLE BIBLIOTECA(
            game_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
            rank_biblio NUMBER NOT NULL,
            name_biblio VARCHAR2(200) UNIQUE NOT NULL,
            platform_biblio VARCHAR2(50) NOT NULL,
            year_biblio VARCHAR2(50),
            genre_biblio VARCHAR2(50) NOT NULL,
            publisher_biblio VARCHAR2(50) NOT NULL,
            rating NUMBER,
            PRIMARY KEY(game_id)
        )
    
    
    """
)


connection.commit()

#lecturaDatos
    ########
    # Iteramos sobre el csv recojemos las todas las variables para agregar a la tabla tienda y en algunos casos limpimos de comillas
    #   simbolos,frases que oracle db no entiende o resulta en error, agregamos todo a la tabla tienda y realizamos un commit
    ##############
    # Input:
    #       csv: juegos.csv
    #       tabla -tienda
    #
    ##############
    # return:
    #       data total del csv en tabla tienda
    ###############

with open('juegos.csv') as file:
    readCVS = csv.reader(file)
    print(readCVS)
    extra = 0
    cur.execute("TRUNCATE TABLE TIENDA")
    for row in readCVS:
        print(row[0:10])
        
        if(extra != 0):
            if ("'s" in str(row[1]) ):
                print(row[1])
                val = str(row[1])
                
                new_val = val.replace("'s","")
                new_val2 = new_val.replace("'n","") 
                new_val3 = new_val2.replace(" 'n ","")
                new_val4 = new_val3.replace(" Ol' ","old")
                new_val5 = new_val4.replace("N'Groove","Groove")
                new_val6 = new_val5.replace("'98","98")
                new_val7 = new_val6.replace("Goin'","Goin")
                new_val8 = new_val7.replace("Reckin'","Reckin")
                print(new_val8)

                cur.execute('insert into TIENDA(rank,name,platform,year,genre,publisher,na_sales,eu_sales,jp_sales,other_sales,global_sales) values (\''+str(row[0])+'\',\''+ new_val8+'\',\''+ str(row[2]) + '\', \'' +str(row[3]) + '\' ,\'' +str(row[4]) + '\',\'' +str(row[5]) + '\', \'' +str(row[6]) + '\',\'' +str(row[7]) + '\',\'' +str(row[8]) + '\',\'' +str(row[9]) + '\',\'' +str(row[10]) +'\' )') 
            
            else:
                val = str(row[1])
                publisher_aux = str(row[5])
                p_aux = publisher_aux.replace("'s","")
                new_val = val.replace("'","")
               
                new_val2 = new_val.replace("'n","")
                new_val3 = new_val2.replace(" 'n","")
                statement = 'insert into TIENDA(rank,name,platform,year,genre,publisher,na_sales,eu_sales,jp_sales,other_sales,global_sales) values(\''+str(row[0])+'\',\''+ new_val3+'\',\''+ str(row[2]) + '\', \'' +str(row[3]) + '\' ,\'' +str(row[4]) + '\',\'' +p_aux + '\', \'' +str(row[6]) + '\',\'' +str(row[7]) + '\',\'' +str(row[8]) + '\',\'' +str(row[9]) + '\',\'' +str(row[10]) +'\' )'
                cur.execute(statement)
                
            connection.commit()
        
        
        elif extra == 0:
            extra +=1
            
    
file.close()


finish = False

state = ''' CREATE [OR REPLACE] TRIGGER elimina_copia
            AFTER INSERT ON BIBLIOTECA 
            

        '''

while (not finish):

    #Tienda -> todas las columnas 
    #Biblioteca --> todas menos data de ventas --> iniciar esta vacia (juegos usuario)
    print("1- Mostrar Bibliotecas")
    print("2- Comprar juego por nombre ")
    print("3- Top 5 juegos con mayores ventas --> tienda ")
    print("4- Top 5 juegos mas vendidos por genero --> tienda")
    print("5- Eliminar juego de la biblioteca ")
    print("6- Actualizar calificacion --> biblioteca")
    print("7- Buscar informacion juego --> tienda : biblioteca ?  ")
    print("8- Buscar juego segun plataforma --> tienda ")
    print("9- Eliminar todos los juegos --> biblioteca ")
    print("10- Terminar juego ")

    
    print(" ")
    val = int(input("Ingrese numero del 1-10: "))
    
    print(" ")

    
    """
    * MostrarBiblioteca
    **************
    * Opcion 1 del ciclo debe ejecutar una query que creara una vista de los juegos poseidos por usuario en el momento actual
             y mostrarlos por pantalla
    **************
    * Input:
    *       Tienda.juegos
    **************
    * return:
    *    Juegos en biblioteca en dba.
   """

    if(val == 1):
        
        
        cur.execute("CREATE OR REPLACE VIEW juegos AS SELECT name_biblio,platform_biblio,rating FROM BIBLIOTECA ")
        connection.commit()
        cur.execute("SELECT * FROM juegos")
        for x in cur.fetchall():
            print(x)

        print(" ")
    
    
    
    
    
    
    
    
    
  

    #Comprar juegos
    ########
    # Opcion 2 del ciclo debe pedir un string por entrada para buscarlo en la tabla de tienda.
    #       procede a realizar 2 querys una para buscar y otra para insertar en tabla biblioteca 
    #       
    ##############
    # Input:
    #       str: nombre juego
    #       int rating
    #      tabla tienda
    ##############
    # return:
    #       Juego Insertado en tabla biblioteca
    ###############
    
    
    elif(val == 2):
        
        print("Quieres comprar un juego: ")
        aux = input("Ingresa nombre de juego a comprar ||:  ") #Con Mayus y sin 'S 'Ol
        statement = 'select * from TIENDA WHERE NAME = \''+aux+ '\''
        
        cur.execute(statement)
        filas = cur.fetchall()
        
        statement2 = 'select * from BIBLIOTECA WHERE NAME_BIBLIO = \''+aux+ '\''
        
        cur.execute(statement2)
        filas1 = cur.fetchall()

        if(filas != filas1):
            val_str = int(input("Ingesa rating que le pondras a este juego (1-5 int): "))
            statement3 = 'insert into BIBLIOTECA (RANK_BIBLIO,NAME_BIBLIO,PLATFORM_BIBLIO,YEAR_BIBLIO,GENRE_BIBLIO,PUBLISHER_BIBLIO,RATING) values ( \'' +str(filas[0][0])+ '\',\''+str(filas[0][1])+'\', \''+str(filas[0][2])+'\',\''+str(filas[0][3])+'\',\''+str(filas[0][4])+'\',\''+str(filas[0][5])+'\',\''+str(val_str)+'\') '
        
            try:
                cur.execute(statement3)

            except NameError:
                print("No puedes Comprar repetidos.")
            finally:
                connection.commit()
                print(" ")

                continue
            
            connection.commit()
            print(" ")
            print("Juego agregado a tu biblioteca. !!! ")
        
        elif(filas1 == filas):
            print("Juego repetido no lo puedes comprar")
    
    
    
    
    # Top 5 games total sales
    ########
    # Opcion 3 del ciclo debe realizar una query a en la tabla tienda y mostrar por pantalla lo obtenido 
    #       
    ##############
    # Input:
    #       tabla-tienda
    ##############
    # return:
    #       5 juego ordenados por ranking de ventas
    ###############
    elif(val == 3):
       
        print(" ")
        print("Los 5 juegos mas vendidos son: ")
        print(" ")  
        statement = 'SELECT rank,name,global_sales FROM TIENDA ORDER BY rank fetch first 5 rows only '
        cur.execute(statement)
        connection.commit()
        rows =  cur.fetchall()
        for x in rows:
            print(x)

        print(" ")
        
    
    
    
    
    # Top 5 total sales of games per genre
    ########
    # Opcion 4 del ciclo debe pedir por entrada el genero a buscar, realizar una query incluyendo a ese genero y ordenar por ranking de ventas
    #              Despues mostrar por pantalla lo obtenido   
    ##############
    # Input:
    #       str: genero
    #       tabla-tienda
    ##############
    # return:
    #       5 juego ordenados por ranking de ventas y filtrados por genero
    ###############
     
    elif(val == 4):
        print(" ")
        valstr = input("Ingese genero de juego buscado: ")
        print(valstr)
       
        print(" ")

        statement = []
        cur.execute(" SELECT rank,name,global_sales,genre FROM TIENDA WHERE genre = '" + valstr + "'  ORDER BY rank fetch first 5 rows only " )

        connection.commit()
        print(f"Los 5 juegos mas vendidos segun genero: {valstr} son: ")
        print(" ")  
        filas = cur.fetchall()

        for i in filas:
            print(i)
        
        print(" ")
       
    
    
    
    
    
    
    
    
    # EliminarJuego
    ########
    # Opcion 5 del ciclo debe pedir por entrada el nombre a eliminar de la tabla biblioteca, realizar una query incluyendo a ese juego 
    #               y eliminarlo de la biblioteca si es que existe en esta sino no elimina nada
    #                 
    ##############
    # Input:
    #       str: juego
    #       tabla-biblioteca
    ##############
    # return:
    #       void
    ###############
    elif(val == 5):
            

        print(" ")
        valstr = input("Ingese Juego que quiere eliminar de la biblioteca: ")
        print(valstr)
        cur.execute(" DELETE FROM BIBLIOTECA WHERE name_biblio = '" + valstr + "'  " )
        connection.commit()
        print(" ")
        print("Juego eliminado de la biblioteca ")
     
        print(" ")
     
     
    
    
    
    
    
    
    
    #Actualizar calificacion 
    #Pedir nombre <<str>> y mostrar actual, pedir calificacionm nueva <int> y actualizar valor <int>
    ########
    # Opcion 6 del ciclo debe pedir por entrada el nombre a actualizar de la tabla biblioteca, realizar una query incluyendo a ese juego 
    #               y, mostrar la calificacion actual despues pedir por entrada el nuevo rating y por ultimo ejecutar la query 
    #               que cambia el rating del juego en la tabla
    #                 
    ##############
    # Input:
    #       str: juego
    #       int: new_rating
    #       tabla-biblioteca
    ##############
    # return:
    #       void
    ###############
    elif(val == 6):
      
        auxi =  input("Ingrese nombre de juego a actualizar: ")
        cur.execute(" SELECT rating FROM BIBLIOTECA WHERE name_biblio = '"+ auxi +"' ")
        for x in cur.fetchone():
            print(f"Rating actual: {x}")

        val_aux = int(input("Ingresa nueva calificacion: "))

        cur.execute(" UPDATE BIBLIOTECA SET rating = '"+str(val_aux)+"' WHERE name_biblio = '"+ auxi +"' ")
        
        
        connection.commit()
   
   
   
        print(" ")
    
    
    
    
    #BuscarJuego
    ########
    # Opcion 7 del ciclo debe pedir por entrada el nombre del juego a buscar, y elegir entre biblioteca o tienda
    #           Segun lo seleccionado ejecutar una query que muestra todo en la tabla pertinente
    #                 
    ##############
    # Input:
    #       str: juego
    #       tabla-biblioteca
    #       tabla-tienda
    ##############
    # return:
    #       Informacion respecto a un juego
    ###############
    #Hacer formato salid de datos?
    elif(val == 7):
     

        print("Quieres buscar un juego ")
        var0 = input("Ingrese nombre del juego: ")
        print("1 por Tienda, 2 por Biblioteca ")

    
        print(" ")
        var = int(input("Ingrese numero del 1 o 2: "))

        if(var == 1 ):
            #Busqueda por tienda
            cur.execute(" SELECT * FROM TIENDA WHERE name = '"+ var0 +"' ")
            for x in cur.fetchall():
                print(x)
        
        
        
        elif(var == 2):
            #Busqueda por biblioteca
            cur.execute(" SELECT * FROM BIBLIOTECA WHERE name_biblio = '"+ var0 +"' ")
            for x in cur.fetchall():
                print(x)
        print(" ")

        

    #BuscarJuego
    ########
    # Opcion 8 del ciclo debe pedir por entrada la plataforma destino y la cantidad de juegos a buscar 
    #               Realizar  la query incluyendo estos 2 valores y mostrar por pantalla la salida
    #                 
    ##############
    # Input:
    #       str: plataforma
    #       int: cantidad_juegos
    #       tabla-tienda
    ##############
    # return:
    #       Informacion respecto a un juego
    ###############
    elif(val == 8):
        print(" ")
        print("Buscar juego por plataforma")
        valor = input("Ingresa plataforma: ")
        rep =  input("Ingresa cantidad de juegos a buscar: ")
        
        cur.execute(" SELECT rank,name,platform,genre FROM TIENDA WHERE platform = '" + valor + "'  fetch first '"+rep+"' rows only "   )
        print(" ")
        for x in cur.fetchall():
            print(x)

        print(" ")
    
    
    
    
    
    #BuscarJuego
    ########
    # Opcion 9 del ciclo debe eliminar todo el contenido de la biblioteca pero no la tabla en si en caso que quiera comprar mas juegos
    ##############
    # Input:
    #       tabla-biblioteca
    ##############
    # return:
    #       void
    ###############

    elif(val == 9):
        print("Quieres Eliminar todos los juegos ")
        cur.execute(" TRUNCATE TABLE BIBLIOTECA ")
        print(" ")

        print("Juegos eliminados ")
       
        print(" ")
      
    
    #Opcion de salida
    elif(val == 10):
        print("Terminaste, buenas tardes ")
        finish = True

    
    else:
        print("Entrada erronea")
    